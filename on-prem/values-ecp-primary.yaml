## Kubecost configuration
global:
  ## @param clusterId The id of the cluster REQUIRED
  ##
  clusterId: CLUSTER_NAME
  ## @param global.federatedStorage.config The config for the federated storage
  ## @param global.federatedStorage.existingSecret The name of an existing secret to use for the federated storage config. Note, you cannot set both `config` and `existingSecret`.
  ## The name of the Secret containing a bucket config for federated storage.
  ## The contents should be stored under a key named storage-config.yaml by default.
  ## Ref: https://www.ibm.com/docs/en/kubecost/self-hosted/2.x?topic=cluster-long-term-federated-storage-configuration
  federatedStorage:
    config: ""
  #   enabled: false #not needed for eval
  # If you want to use a different file name for the federated storage config, you can set the fileName value.
  # fileName: federated-store.yaml  # set this value to change what the file name for the yaml config is
  platforms: 
    cicd:
      enabled: true  # Set to true when using affected CI/CD tools for access to the below configuration options.
      skipSanityChecks: true  # If true, skip all sanity/existence checks for resources like Secrets.

  ## @param global.acknowledged Acknowledgment flag for Kubecost 3.0 major upgrade
  ## REQUIRED FOR ENTERPRISE: Kubecost 3.0 introduces breaking changes and potential data disruption
  ## risks. Review release notes and migration guide before proceeding.
  ## Ref: https://github.com/kubecost/kubecost/releases
  acknowledged: true
## Kubecost Cloud Cost Pod
## Processes cloud billing data and pushes CloudCost ETL data to the Federated Storage Bucket.
##
cloudCost:
  enabled: false
# cloudIntegrationSecret: cloud-integration # only runs on primary cluster  
  image:
    registry: ""  # Default is "icr.io"
    repository: kubecost/cost-model
    tag: ""  # Default is to match the Chart.AppVersion
  fullImageName: ""  # Overrides the default image construction logic.
  imagePullPolicy: IfNotPresent
aggregator:
  enabled: true
  image:
    registry: ""  # Default is "icr.io"
    repository: kubecost/cost-model
    tag: ""  # Default is to match the Chart.AppVersion
  fullImageName: ""  # Overrides the default image construction logic.
  imagePullPolicy: IfNotPresent
  ## Retention values determine for what duration into the past data will be
  ## ingested into Aggregator's database
  retention1d: 91
  retention1h: 49
  retention10m: 36
  persistentConfigsStorage:
    storageClass: ""  # default storage class
    storageRequest: 1Gi
  aggregatorDbStorage:
    storageClass: ""  # default storage class
    storageRequest: 128Gi
  resources:
    limits: {}
      # memory: ""
      # cpu: ""
    requests:
      memory: 3Gi
      cpu: 100m

## Kubecost Multi-cluster Diagnostics
## A single view into the health of all agent clusters. Each agent cluster sends
## its diagnostic data to a storage bucket.
## Ref: https://www.ibm.com/docs/en/kubecost/self-hosted/2.x?topic=cluster-multi-diagnostics
## retention: deletes data beyond specified retention period
diagnostics:
  enabled: true
  retention: 30d

## Values for the finops-agent sub-chart
## Ref: https://github.com/kubecost/finops-agent-chart/
##
finopsagent:
  enabled: true
  # serviceAccount:
  #   create: true
  #   name: finops-agent
  agent:
    collectorDataSource:
      enabled: true
      scrapeInterval: 30s
      ## Retention values are for the agent's local store only and do not affect Kubecost history.
      ## These can be increased, but will require more memory.
      retention10m: 6
      retention1h: 3
      retention1d: 2
    exporter:
      ## Emission interval is the interval at which the agent will emit metrics to the object storage.
      ## This can be increased to reduce the number of object (versions) written to the object storage when versioning is enabled.
      emissionInterval: 1m
networkCosts:
  enabled: false
forecasting:
  enabled: false
clusterController:
  enabled: false
kubecostProductConfigs:
  productKey:
    enabled: false
    key: ""
    secretname: ""  # Reference an existing k8s secret created from a file named productkey.json of format { "key": "enterprise-key-here" }. If the secretname is specified, a configmap with the key will not be created.
    mountPath: ""  # (use instead of secretname) Declare the path at which the product key file is mounted (eg. "/some/custom/path/productkey.json" by a secrets provisioner). The file must be of format { "key": "enterprise-key-here" }.
 
## Kubecost Local Store
## When no federated storage bucket is configured, localStore provides local storage via a
## container, PVC, and service for agent and aggregator communication.
##
localStore:
  enabled: true
enterpriseCustomPricing:
  # Enabled the feature by setting this flag to "true". If enabled, the feature
  # requires a CSV pricing spec to be provided at the location, below, using a
  # ConfigMap, for which we provide instructions, also below.
  enabled: true
  # Use the following command to create a ConfigMap from your pricing spec CSV.
  # You may change the ConfigMap name, or file name, as long as you set the
  # correct configMapName and location.URI, respectively.
  #
  #   kubectl create configmap -n kubecost kubecost-enterprise-pricing --from-file pricing.csv
  # 
  configMapName: kubecost-enterprise-pricing
  # The file name (e.g. pricing.csv) needs to match the file name used to make the ConfigMap (above)
  location:
    URI: /var/configs/enterprise-pricing/pricing.csv