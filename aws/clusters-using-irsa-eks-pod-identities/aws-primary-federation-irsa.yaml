## Kubecost configuration
global:
  ## @param clusterId The id of the cluster REQUIRED
  ##
  clusterId: CLUSTER_NAME
  ## @param global.federatedStorage.config The config for the federated storage
  ## @param global.federatedStorage.existingSecret The name of an existing secret to use for the federated storage config. Note, you cannot set both `config` and `existingSecret`.
  ## The name of the Secret containing a bucket config for federated storage.
  ## The contents should be stored under a key named storage-config.yaml by default.
  ## Ref: https://www.ibm.com/docs/en/kubecost/self-hosted/2.x?topic=cluster-long-term-federated-storage-configuration
  federatedStorage:
    config: ""
  #   enabled: false #not needed for eval
  # If you want to use a different file name for the federated storage config, you can set the fileName value.
  # fileName: federated-store.yaml  # set this value to change what the file name for the yaml config is
  
  cicd:
    enabled: false  # Set to true when using affected CI/CD tools for access to the below configuration options.
    skipSanityChecks: false  # If true, skip all sanity/existence checks for resources like Secrets.

  ## @param global.acknowledged Acknowledgment flag for Kubecost 3.0 major upgrade
  ## REQUIRED FOR ENTERPRISE: Kubecost 3.0 introduces breaking changes and potential data disruption
  ## risks. Review release notes and migration guide before proceeding.
  ## Ref: https://github.com/kubecost/kubecost/releases
  acknowledged: true
## Kubecost Cloud Cost Pod
## Processes cloud billing data and pushes CloudCost ETL data to the Federated Storage Bucket.
##
cloudCost:
  enabled: false
# cloudIntegrationSecret: cloud-integration # only runs on primary cluster  
  image:
    registry: ""  # Default is "icr.io"
    repository: kubecost/cost-model
    tag: ""  # Default is to match the Chart.AppVersion
  fullImageName: ""  # Overrides the default image construction logic.
  imagePullPolicy: IfNotPresent
aggregator:
  enabled: true
  image:
    registry: ""  # Default is "icr.io"
    repository: kubecost/cost-model
    tag: ""  # Default is to match the Chart.AppVersion
  fullImageName: ""  # Overrides the default image construction logic.
  imagePullPolicy: IfNotPresent
  ## Retention values determine for what duration into the past data cloud billing data will be
  ## queried and processed into ETL.
  retention1d: 91

  ## Retention values determine for what duration into the past data will be
  ## ingested into Aggregator's database
  retention1d: 91
  retention1h: 49
  retention10m: 36
  persistentConfigsStorage:
    storageClass: ""  # default storage class
    storageRequest: 1Gi
  aggregatorDbStorage:
    storageClass: ""  # default storage class
    storageRequest: 128Gi
  resources:
    limits: {}
      # memory: ""
      # cpu: ""
    requests:
      memory: 3Gi
      cpu: 100m

## Kubecost Multi-cluster Diagnostics
## A single view into the health of all agent clusters. Each agent cluster sends
## its diagnostic data to a storage bucket.
## Ref: https://www.ibm.com/docs/en/kubecost/self-hosted/2.x?topic=cluster-multi-diagnostics
## retention: deletes data beyond specified retention period
diagnostics:
  enabled: true
  retention: 30d
## Values for the finops-agent sub-chart
## Ref: https://github.com/kubecost/finops-agent-chart/
##
finops-agent:
  enabled: true
  agent:
    collectorDataSource:
      enabled: true
      scrapeInterval: 30s
      networkPort: 3001
      retention10m: 6
      retention1h: 3
      retention1d: 2
    exporter:
      emissionInterval: 1m
## Service Account for IBM FinOps Agent
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
## @param serviceAccount.create Enable creation of ServiceAccount for IBM FinOps Agent pods
## @param serviceAccount.name Name of the service account to use. If not set and `create` is `true`, a name is generated
## @param serviceAccount.automountServiceAccountToken Allows auto mount of ServiceAccountToken on the serviceAccount created
## @param serviceAccount.annotations Additional custom annotations for the ServiceAccount      
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
    annotations: {}
networkCosts:
  enabled: false
forecasting:
  enabled: false
clusterController:
  enabled: false
kubecostProductConfigs:
  productKey:
    enabled: false
    key: ""
    secretname: ""  # Reference an existing k8s secret created from a file named productkey.json of format { "key": "enterprise-key-here" }. If the secretname is specified, a configmap with the key will not be created.
    mountPath: ""  # (use instead of secretname) Declare the path at which the product key file is mounted (eg. "/some/custom/path/productkey.json" by a secrets provisioner). The file must be of format { "key": "enterprise-key-here" }.
## Kubecost Local Store
## When no federated storage bucket is configured, localStore provides local storage via a
## container, PVC, and service for agent and aggregator communication.
##
localStore:
  enabled: true
serviceAccount: 
# This example has Kubecost create the service account + annotation. It does not automatically configure the role/ to trust the service account.
# To use a dedicated service account, set create to false, remove the annotation, and specify the name of your dedicated service account. 
  create: true
  annotations: # Use the annotation for your cloud provider. This example uses AWS IAM Roles.
    eks.amazonaws.com/role-arn: arn:aws:iam::<account>:role/<roleName>
 # name: kubecost-irsa-sa
    